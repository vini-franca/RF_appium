name: Mobile Tests Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Passo 2: Configurar o ambiente Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Passo 3: Instalar dependências do requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Passo 4: Instalar o Appium
      - name: Install Appium
        run: |
          npm install -g appium

      # Passo 5: Configurar e iniciar o emulador Android
      - name: Set up Android emulator
        run: |
          sudo apt-get install -y --no-install-recommends libgl1-mesa-glx libgl1-mesa-dri
          echo "y" | sdkmanager "system-images;android-30;google_apis;x86"
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;google_apis;x86"
          emulator -avd test -no-audio -no-window &
          adb wait-for-device

      # Passo 6: Iniciar o servidor Appium em segundo plano
      - name: Start Appium server
        run: |
          appium --log-level error --allow-insecure chromedriver_autodownload &
          sleep 10  # Espera o servidor iniciar

      # Passo 7: Verificar status do Appium
      - name: Check Appium server status
        run: |
          curl http://localhost:4723/wd/hub/status

      # Passo 8: Executar os testes
      - name: Run tests
        run: |
          robot --outputdir results --log log.html --report report.html features/

      # Passo 9: Publicar os resultados dos testes
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results/
